package ControleAmostrasLab.controller;

import ControleAmostrasLab.model.ControleAmostra;
import ControleAmostrasLab.ControleAmostrasLabRepository;

import java.util.ArrayList;
import java.util.List;

public class ControleAmostrasLabController implements ControleAmostrasLabRepository {

    private List<ControleAmostra> amostras;

    public ControleAmostrasLabController() {
        this.amostras = new ArrayList<>();
    }

    /**
     * Método responsável por cadastrar uma nova amostra na lista de amostras.
     * @param amostra A amostra a ser cadastrada.
     */
    @Override
    public void cadastrar(ControleAmostra amostra) {
        // Adiciona a amostra à lista de amostras
        amostras.add(amostra);
        System.out.println("Amostra cadastrada com sucesso!");
    }

    @Override
    public void listarTodas(List<ControleAmostra> amostras) {
        if (amostras.isEmpty()) {
            System.out.println("Nenhuma amostra cadastrada.");
        } else {
            for (ControleAmostra amostra : amostras) {
                amostra.visualizarAmostra();
            }
        }
    }

    /**
     * Método auxiliar para buscar uma amostra pelo ID na coleção de amostras.
     * @param id O ID da amostra a ser buscada.
     * @return A amostra correspondente ao ID ou null se não encontrada.
     */
    private ControleAmostra buscarNaCollection(int id) {
        for (ControleAmostra amostra : amostras) {
            if (amostra.getId() == id) {
                return amostra;
            }
        }
        return null;
    }

    /**
     * Método responsável por buscar uma amostra pelo ID.
     * @param id O ID da amostra a ser buscada.
     * @return A amostra encontrada ou null se não existir.
     */
    @Override
    public ControleAmostra buscarPorId(int id) {
        ControleAmostra amostra = buscarNaCollection(id);
        if (amostra != null) {
            return amostra;
        } else {
            System.out.println("Amostra não encontrada.");
            return null;
        }
    }

    @Override
    public void atualizar(ControleAmostra amostra) {
        for (int i = 0; i < amostras.size(); i++) {
            if (amostras.get(i).getId() == amostra.getId()) {
                amostras.set(i, amostra);
                System.out.println("Amostra atualizada com sucesso!");
                return;
            }
        }
        System.out.println("Amostra não encontrada para atualização.");
    }

    @Override
    public void deletar(int id) {
        ControleAmostra amostraParaExcluir = null;
        for (ControleAmostra amostra : amostras) {
            if (amostra.getId() == id) {
                amostraParaExcluir = amostra;
                break;
            }
        }
        if (amostraParaExcluir != null) {
            amostras.remove(amostraParaExcluir);
            System.out.println("Amostra excluída com sucesso!");
        } else {
            System.out.println("Amostra não encontrada.");
        }
    }

    @Override
    public void inserirResultado(int id, String resultado) {
        ControleAmostra amostra = buscarPorId(id);
        if (amostra != null) {
            amostra.inserirResultado(resultado);
            System.out.println("Resultado inserido com sucesso!");
        }
    }

    @Override
    public void atualizarStatus(int id, String status) {
        ControleAmostra amostra = buscarPorId(id);
        if (amostra != null) {
            amostra.atualizarStatus(status);
            System.out.println("Status atualizado com sucesso!");
        }
    }
}

